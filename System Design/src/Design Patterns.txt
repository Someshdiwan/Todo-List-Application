‚úÖ MVC (Model-View-Controller)
	‚Ä¢	Model: TodoItem
	‚Ä¢	Controller: TodoController
	‚Ä¢	View: HTML + JS terminal-style frontend
	‚Ä¢	Service Layer: Acts as business logic separating concerns cleanly.

‚úÖ Singleton (Spring Context)
	‚Ä¢	TodoService acts effectively as a singleton managed by Spring‚Äôs container ‚Äî one instance handles all requests.

‚úÖ Factory & Builder Principles (Spring Boot)
	‚Ä¢	The application context acts like a factory, instantiating components (@Service, @Controller) via dependency injection.

‚úÖ Command Pattern (Frontend)
	‚Ä¢	The JavaScript command processor interprets user input strings like add|name=...|deadline=... into actionable backend API calls.

Additional Engineering Practices
	‚Ä¢	Validation: Done via annotations (@Pattern) and logic (isValidDate) to ensure data consistency.
	‚Ä¢	Encapsulation: All data operations hidden behind TodoService.
	‚Ä¢	Immutability Intent: Each TodoItem instance represents a snapshot of a task‚Äôs state.
	‚Ä¢	Layered Architecture: Presentation ‚Üí API ‚Üí Service ‚Üí Data flow is cleanly divided.
	‚Ä¢	Containerization: Docker ensures reproducibility, isolated runtime, and portability.


+----------------------------------------------------------------------------------------------+ |
|                                üß© DESIGN PRINCIPLES & PATTERNS ‚Äî SUMMARY                       |
+----------------------+------------------------------+----------------------------------------+ |
| Category             | Principle / Pattern           | Used in Project / Description           |
+----------------------+------------------------------+----------------------------------------+ |
| Core Principles      | SOLID                         | ‚úÖ Partially ‚Äî Controller, Service, and |
|                      |                               | Model layers follow SRP and DIP via     |
|                      |                               | Spring Boot DI.                         |
|                      | SRP (Single Responsibility)   | ‚úÖ Each class (Controller, Service,     |
|                      |                               | Model) has one clear purpose.           |
|                      | OCP (Open/Closed)             | ‚úÖ Business logic can be extended       |
|                      |                               | (e.g., database, UI) without modifying  |
|                      |                               | core code.                              |
|                      | LSP (Liskov Substitution)     | ‚öôÔ∏è Potential ‚Äî Could be applied if      |
|                      |                               | service interfaces are introduced.      |
|                      | ISP (Interface Segregation)   | ‚öôÔ∏è Potential ‚Äî REST endpoints are       |
|                      |                               | logically separated, but explicit       |
|                      |                               | interfaces not yet defined.             |
|                      | DIP (Dependency Inversion)    | ‚úÖ Spring Boot handles dependency       |
|                      |                               | injection between controller and        |
|                      |                               | service.                                |
+----------------------+------------------------------+----------------------------------------+ |
| Code Quality         | DRY (Don‚Äôt Repeat Yourself)   | ‚úÖ Common logic (e.g., date validation, |
|                      |                               | sorting) centralized in helper methods. |
|                      | KISS (Keep It Simple, Stupid) | ‚úÖ Straightforward architecture ‚Äî no    |
|                      |                               | databases, no overengineering.          |
|                      | YAGNI (You Aren‚Äôt Gonna       | ‚úÖ Minimal viable feature set, avoids   |
|                      | Need It)                      | unused abstractions.                    |
+----------------------+------------------------------+----------------------------------------+ |
| Design Patterns      | MVC (Model-View-Controller)   | ‚úÖ Controller ‚Üí Service ‚Üí Model         |
|                      |                               | separation; HTML/JS UI as view layer.   |
|                      | Singleton (via Spring Context)| ‚úÖ Service managed as singleton by      |
|                      |                               | Spring container.                       |
|                      | Command Pattern (Frontend)    | ‚úÖ JS command parser interprets inputs  |
|                      |                               | like `add`.                             |
|                      | Factory Pattern               | ‚öôÔ∏è Implicit ‚Äî Spring‚Äôs bean factory     |
|                      |                               | instantiates and wires dependencies.    |
|                      | Builder / Fluent API          | ‚ùå Not used yet ‚Äî could be added for    |
|                      |                               | creating Todo objects cleanly.          |
+----------------------+------------------------------+----------------------------------------+ |
| Architecture         | Layered Architecture          | ‚úÖ Controller ‚Üí Service ‚Üí Data structure|
|                      |                               | flow is clear.                          |
|                      | Microservice-ready (Docker)   | ‚úÖ Multi-stage Docker build makes it    |
|                      |                               | portable and deployable anywhere.       |
|                      | Persistence Layer             | ‚ùå Currently uses in-memory storage ‚Äî   |
|                      |                               | no database or repository pattern.      |
+----------------------+------------------------------+----------------------------------------+ |
| System Design        | LLD + HLD Focus               | ‚úÖ Demonstrates low-level logic design  |
|                      |                               | and high-level container architecture.  |
+----------------------+------------------------------+----------------------------------------+ |
| Testing / CI         | Automated Tests               | ‚ùå Manual validation only; could        |
|                      |                               | integrate JUnit + CI later.             |
+----------------------+------------------------------+----------------------------------------+ |

üß† IN SHORT

‚úÖ Used: SRP, OCP, DIP, DRY, KISS, MVC, Command Pattern, Docker, Layered Design.
‚öôÔ∏è Partially Used / Possible Enhancements: LSP, ISP, Factory abstractions.
‚ùå Not Yet Used: Builder Pattern, Persistent Database Layer, Automated Testing.
